name: Test Pull Request

on:
  pull_request:
    branches: [main]
    types: [opened, synchronize, reopened]

jobs:
  test:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install coverage
      
      - name: Lint with flake8 (if available)
        run: |
          # Install flake8 for basic linting
          pip install flake8
          # Stop the build if there are Python syntax errors or undefined names
          flake8 app/ --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 app/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true
      
      - name: Run tests with pytest
        run: |
          pytest tests/ -v --tb=short --junitxml=pytest-results.xml
      
      - name: Generate coverage report
        run: |
          coverage run -m pytest tests/
          coverage report --include="app/*"
          coverage xml --include="app/*"
      
      - name: Upload coverage to Codecov (optional)
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false
        continue-on-error: true
      
      - name: Comment coverage on PR
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            
            // Read coverage report
            let coverageOutput = '';
            try {
              const { execSync } = require('child_process');
              coverageOutput = execSync('coverage report --include="app/*"', { encoding: 'utf8' });
            } catch (error) {
              coverageOutput = 'Coverage report generation failed';
            }
            
            const { owner, repo } = context.repo;
            const issue_number = context.payload.pull_request.number;
            
            // Find existing coverage comment
            const comments = await github.rest.issues.listComments({
              owner,
              repo,
              issue_number
            });
            
            const coverageComment = comments.data.find(comment => 
              comment.body.includes('## 📊 Test Coverage Report')
            );
            
            const commentBody = `## 📊 Test Coverage Report
            
            **Python Version:** ${{ matrix.python-version }}
            
            \`\`\`
            ${coverageOutput}
            \`\`\`
            
            **Status:** ${coverageOutput.includes('100%') ? '✅ Excellent coverage!' : '⚠️ Consider adding more tests'}
            
            ---
            *This comment is automatically updated on each push.*`;
            
            if (coverageComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner,
                repo,
                comment_id: coverageComment.id,
                body: commentBody
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner,
                repo,
                issue_number,
                body: commentBody
              });
            }

  # Docker build test (without pushing)
  docker-build-test:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Build Docker image (test only)
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: fastapi-backend:test
          cache-from: type=gha
          cache-to: type=gha,mode=max
      
      - name: Test Docker image
        run: |
          # Run the container in background
          docker run -d --name test-container -p 8000:8000 fastapi-backend:test
          
          # Wait for container to start
          sleep 10
          
          # Test if the application is responding
          if curl -f http://localhost:8000/ > /dev/null 2>&1; then
            echo "✅ Docker image test passed"
          else
            echo "❌ Docker image test failed"
            docker logs test-container
            exit 1
          fi
          
          # Cleanup
          docker stop test-container
          docker rm test-container

  # Security scan (optional)
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
        continue-on-error: true
      
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
        continue-on-error: true

  # Summary job
  test-summary:
    needs: [test, docker-build-test]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Test Summary
        run: |
          echo "## 📋 Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "| Job | Status |" >> $GITHUB_STEP_SUMMARY
          echo "|-----|--------|" >> $GITHUB_STEP_SUMMARY
          echo "| Unit Tests | ${{ needs.test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Docker Build | ${{ needs.docker-build-test.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.test.result }}" == "success" && "${{ needs.docker-build-test.result }}" == "success" ]]; then
            echo "🎉 **All tests passed!** This PR is ready for review." >> $GITHUB_STEP_SUMMARY
          else
            echo "⚠️ **Some tests failed.** Please review and fix the issues before merging." >> $GITHUB_STEP_SUMMARY
          fi